{
  "definitions" : {
    "networking.enterprise.mesh.gloo.solo.io.v1beta1.WasmDeployment" : {
      "description" : "Deploys one or more WASM Envoy Filters to selected Sidecars and Gateways in a Mesh.",
      "properties" : {
        "filters" : {
          "description" : "Specify WASM filter parameters.",
          "items" : {
            "allOf" : [ {
              "oneOf" : [ {
                "not" : {
                  "anyOf" : [ {
                    "required" : [ "localPathSource" ]
                  }, {
                    "required" : [ "httpUriSource" ]
                  }, {
                    "required" : [ "wasmImageSource" ]
                  } ]
                }
              }, {
                "required" : [ "localPathSource" ]
              }, {
                "required" : [ "httpUriSource" ]
              }, {
                "required" : [ "wasmImageSource" ]
              } ]
            }, {
              "oneOf" : [ {
                "not" : {
                  "anyOf" : [ {
                    "required" : [ "staticFilterConfig" ]
                  }, {
                    "required" : [ "dynamicFilterConfig" ]
                  } ]
                }
              }, {
                "required" : [ "staticFilterConfig" ]
              }, {
                "required" : [ "dynamicFilterConfig" ]
              } ]
            } ],
            "properties" : {
              "dynamicFilterConfig" : {
                "description" : "Provide configuration from a dynamic configuration source.\nThis is used to connect proxies to a user-provided configuration server\nrather than using the WasmDeployment CR to update filter configuration.\nNOTE: Not currently implemented. This field serves as a placeholder.\npassing it to the plugin. `google.protobuf.BytesValue` and\n`google.protobuf.StringValue` are passed directly without the wrapper.\nTODO(ilackarms): implement with dynamic filter config source (FCDS) https://github.com/envoyproxy/envoy/issues/7867",
                "type" : "string"
              },
              "filterContext" : {
                "description" : "The specific config generation context to which to attach the filter. Istio\ngenerates envoy configuration in the context of a gateway,\ninbound traffic to sidecar and outbound traffic from sidecar.\nUses the Istio default (`ANY`).",
                "enum" : [ "ANY", "SIDECAR_INBOUND", "SIDECAR_OUTBOUND", "GATEWAY" ],
                "type" : "string"
              },
              "httpUriSource" : {
                "description" : "Select `http_uri_source` to deploy the filter from an HTTP/S URI accessible\nto the workload proxy. Note that Gloo Mesh cannot verify\nwhether the target workload proxy containers have HTTP access the given URI.\nIf filters do not load, please inspect the sidecar proxy logs.\nTODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status\nTODO(ilackarms): we may need to provide options for customizing the Cluster given to envoy along with the HTTP Fetch URI. currently Gloo Mesh will create a simple plaintext HTTP cluster from the Host/Port specified in the URI.",
                "properties" : {
                  "sha" : {
                    "description" : "Required. The Sha256 Checksum of the filter binary (will be verified by the proxy).",
                    "type" : "string"
                  },
                  "uri" : {
                    "description" : "The HTTP URI from which to fetch the filter.",
                    "type" : "string"
                  }
                },
                "type" : "object"
              },
              "insertBeforeFilter" : {
                "description" : "The filter in the Envoy HTTP Filter Chain immediately before which the WASM filter will be\ninserted.\nDefaults to `envoy.router`.",
                "type" : "string"
              },
              "localPathSource" : {
                "description" : "Select `local_path_source` to deploy the filter from a file accessible\nto the workload proxy. Note that Gloo Mesh cannot verify\nwhether the target workload proxy containers contain the given path.\nIf filters do not load, please inspect the sidecar proxy logs.\nTODO(ilackarms): see if we can somehow verify the filter exists in the proxy container and surface that on the WasmDeployment status",
                "type" : "string"
              },
              "rootId" : {
                "description" : "The `root id` must match the `root id` defined inside the filter.\nIf the user does not provide this field, Gloo Mesh will attempt to pull the image\nand set it from the `filter_conf` contained in the image config.\nNote that if the `filter_source` is not set to `wasm_image_source`, this field is required.",
                "type" : "string"
              },
              "staticFilterConfig" : {
                "description" : "Provide configuration as a static\n`google.protobuf.Struct` is serialized as JSON before\npassing it to the plugin. `google.protobuf.BytesValue` and\n`google.protobuf.StringValue` are passed directly without the wrapper.",
                "type" : "object",
                "x-kubernetes-preserve-unknown-fields" : true
              },
              "vmId" : {
                "description" : "An ID which will be used along with a hash of the wasm code\n(or the name of the registered Null VM plugin) to determine which VM will be used to load the WASM filter.\nAll filters on the same proxy which use the same `vm_id` and code within will use the same VM.\nMay be left blank. Sharing a VM between plugins can reduce memory utilization and make sharing of data easier which may have security implications.",
                "type" : "string"
              },
              "wasmImageSource" : {
                "description" : "fetch the image from a [WASM OCI Registry](https://webassemblyhub.io/)\nImages can be built and pushed to registries using `meshctl` and `wasme`.",
                "properties" : {
                  "wasmImageTag" : {
                    "description" : "The full tag of the wasm image. It must include the registry address at the beginning, e.g. \"webassemblyhub.io/ilackarms/helloworld:v0.1\".",
                    "type" : "string"
                  }
                },
                "type" : "object"
              }
            },
            "type" : "object"
          },
          "type" : "array"
        },
        "weight" : {
          "description" : "Weight is used to determine the order of WASM Filters when applying\nmultiple WasmDeployments to a single workload.\nDeployed WASM filters will be sorted in order of\nhighest to lowest weight. WasmDeployments with equal weights will be\nsorted non-deterministically.\nNote that all WASM Filters are currently inserted just before the Envoy router filter\nin the HTTP Connection Manager's HTTP Filter Chain.",
          "maximum" : 4.294967295E9,
          "minimum" : 0.0,
          "type" : "integer"
        },
        "workloadSelector" : {
          "description" : "Sidecars/Gateways whose Workloads match these selectors will attach the specified WASM Filters.\nLeave empty to have all workloads in the mesh apply receive the WASM Filter.",
          "items" : {
            "properties" : {
              "kubeWorkloadMatcher" : {
                "description" : "Match Kubernetes workloads by their labels, namespaces, and/or clusters.",
                "properties" : {
                  "clusters" : {
                    "description" : "If specified, match Kubernetes workloads if they exist in one of the specified clusters.\n           When used in a networking policy, omission matches any cluster.\n           When used in a Gloo Mesh Role, a wildcard (`\"*\"`) must be specified to match any cluster.",
                    "items" : {
                      "type" : "string"
                    },
                    "type" : "array"
                  },
                  "labels" : {
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    