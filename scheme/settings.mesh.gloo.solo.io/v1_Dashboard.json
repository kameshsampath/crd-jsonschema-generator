{
  "definitions" : {
    "settings.mesh.gloo.solo.io.v1.Dashboard" : {
      "description" : "Configure settings for the dashboard.",
      "properties" : {
        "auth" : {
          "description" : "Configuration used to authenticate incoming requests.",
          "oneOf" : [ {
            "not" : {
              "anyOf" : [ {
                "required" : [ "oidc" ]
              } ]
            }
          }, {
            "required" : [ "oidc" ]
          } ],
          "properties" : {
            "oidc" : {
              "properties" : {
                "appUrl" : {
                  "description" : "URL to redirect to after successful auth.",
                  "type" : "string"
                },
                "authEndpointQueryParams" : {
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Extra query parameters to apply to the authorization request to the\nidentity provider. For example, using the PKCE flow\n(https://www.oauth.com/oauth2-servers/pkce/authorization-request/) by\nsetting `code_challenge` and `code_challenge_method`.",
                  "type" : "object"
                },
                "callbackPath" : {
                  "description" : "Path to handle the OIDC callback.",
                  "type" : "string"
                },
                "clientId" : {
                  "description" : "The client ID from the issuer",
                  "type" : "string"
                },
                "clientSecret" : {
                  "description" : "THe client secret from the issuer",
                  "properties" : {
                    "name" : {
                      "description" : "name of the resource being referenced",
                      "type" : "string"
                    },
                    "namespace" : {
                      "description" : "namespace of the resource being referenced",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                },
                "discoveryOverride" : {
                  "description" : "Ensure that certain values are set regardless of what the OIDC\nprovider returns.",
                  "properties" : {
                    "authEndpoint" : {
                      "description" : "URL of the provider authorization endpoint.",
                      "type" : "string"
                    },
                    "authMethods" : {
                      "description" : "List of client authentication methods supported by the provider\ntoken endpoint.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "claims" : {
                      "description" : "List of claim types that the provider supports.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "idTokenAlgs" : {
                      "description" : "List of json web signature signing algorithms that the provider\nsupports for encoding claims in a JWT.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "jwksUri" : {
                      "description" : "URL of the provider JSON web key set.",
                      "type" : "string"
                    },
                    "responseTypes" : {
                      "description" : "List of response types that the provider supports.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "scopes" : {
                      "description" : "List of scope values that the provider supports.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "subjects" : {
                      "description" : "List of subject identifier types that the provider supports.",
                      "items" : {
                        "type" : "string"
                      },
                      "type" : "array"
                    },
                    "tokenEndpoint" : {
                      "description" : "URL of the provider token endpoint.",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                },
                "discoveryPollInterval" : {
                  "description" : "How often to poll the OIDC issuer for new configuration.",
                  "type" : "string"
                },
                "header" : {
                  "description" : "Additional headers.",
                  "properties" : {
                    "accessTokenHeader" : {
                      "description" : "If set, the access token will be sent upstream with this header.",
                      "type" : "string"
                    },
                    "idTokenHeader" : {
                      "description" : "If set, the ID token will be sent upstream with this header.",
                      "type" : "string"
                    }
                  },
                  "type" : "object"
                },
                "issuerUrl" : {
                  "description" : "The url of the issuer. We will look for OIDC information in:\n  {{ issuerURL }}/.well-known/openid-configuration",
                  "type" : "string"
                },
                "jwksCacheRefreshPolicy" : {
                  "description" : "If a user executes a request with a key that is not found in the\nJWKS, it could be that the keys have rotated on the remote source,\nand not yet in the local cache. This policy lets you define the\nbehavior for how to refresh the local cache during a request where an\ninvalid key is provided",
                  "oneOf" : [ {
                    "not" : {
                      "anyOf" : [ {
                        "required" : [ "never" ]
                      }, {
                        "required" : [ "always" ]
                      }, {
                        "required" : [ "maxIdpReqPerPollingInterval" ]
                      } ]
                    }
                  }, {
                    "required" : [ "never" ]
                  }, {
                    "required" : [ "always" ]
                  }, {
                    "required" : [ "maxIdpReqPerPollingInterval" ]
                  } ],
                  "properties" : {
                    "always" : {
                      "description" : "If a key is not in the cache, fetch the most recent keys from\nthe IdP and update the cache. NOTE: This should only be done\nin trusted environments, since missing keys will each trigger\na request to the IdP. Using this in an environment exposed to\nthe internet will allow malicious agents to execute a DDoS\nattack by spamming protected endpoints with tokens signed by\ninvalid keys.",
                      "maxProperties" : 0,
                      "type" : "object"
                    },
                    "maxIdpReqPerPollingInterval" : {
                      "description" : "If a key is not in the cache, fetch the most recent keys from\nthe IdP and update the cache. This value sets the number of\nrequests to the IdP per polling interval. If that limit is\nexceeded, we will stop fetching from the IdP for the\nremainder of the polling interval.",
                      "maximum" : 4.294967295E9,
                      "minimum" : 0.0,
                      "type" : "integer"
                    },
                    "never" : {
                      "description" : "Never refresh the local JWKS cache on demand. If a key is not\nin the cache, it is assumed to be malicious. This is the\ndefault policy since we assume that IdPs publish keys before\nthey rotate them, and frequent polling